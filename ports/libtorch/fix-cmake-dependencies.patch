diff --git a/CMakeLists.txt b/CMakeLists.txt
index 24d3c9b..5f17c4c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -539,15 +539,14 @@ endif()
 if(NOT IOS AND CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_OSX_ARCHITECTURES MATCHES "^(x86_64|arm64)$")
   set(CROSS_COMPILING_MACOSX TRUE)
   # We need to compile a universal protoc to not fail protobuf build
-  execute_process(COMMAND ./scripts/build_host_protoc.sh --other-flags "-DCMAKE_OSX_ARCHITECTURES=x86_64;arm64"
-                  WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
-                  RESULT_VARIABLE BUILD_HOST_PROTOC_RESULT)
-  if(NOT BUILD_HOST_PROTOC_RESULT EQUAL "0")
-    message(FATAL_ERROR "Could not compile universal protoc.")
-  endif()
-  set(PROTOBUF_PROTOC_EXECUTABLE "${PROJECT_SOURCE_DIR}/build_host_protoc/bin/protoc")
-  set(CAFFE2_CUSTOM_PROTOC_EXECUTABLE "${PROJECT_SOURCE_DIR}/build_host_protoc/bin/protoc")
 endif()
+find_package(protobuf CONFIG REQUIRED)
+find_program(PROTOBUF_PROTOC_EXECUTABLE
+    NAMES   protoc
+    PATHS   ${_VCPKG_INSTALLED_DIR}/${VCPKG_HOST_TRIPLET}/tools
+)
+set(CAFFE2_CUSTOM_PROTOC_EXECUTABLE ${PROTOBUF_PROTOC_EXECUTABLE})
+include(cmake/ProtoBuf.cmake)
 
 # ---[ Misc checks to cope with various compiler modes
 include(cmake/MiscCheck.cmake)
@@ -561,13 +560,109 @@ if(USE_FBGEMM AND ((CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" AND CMAKE_SIZEOF_VO
   set(USE_FBGEMM OFF)
 endif()
 
-include(cmake/Dependencies.cmake)
+# we will import vcpkg ports instead of CAFFE2_THIRD_PARTY_ROOT
+# include(cmake/Dependencies.cmake)
+find_package(Python3 REQUIRED COMPONENTS Interpreter Development)
+# find_package(pybind11 CONFIG REQUIRED)
+# list(APPEND Caffe2_DEPENDENCY_LIBS Python3::Python pybind11::pybind11)
+if(USE_NUMPY)
+  find_package(Python3 REQUIRED COMPONENTS Interpreter Development NumPy)
+  list(APPEND Caffe2_DEPENDENCY_LIBS Python3::NumPy)
+endif()
+set(PYTHON_EXECUTABLE ${Python3_EXECUTABLE})
+
+find_path(FP16_INCLUDE_DIRS "fp16.h")
+find_path(PSIMD_INCLUDE_DIRS "psimd.h")
+find_path(FXDIV_INCLUDE_DIRS "fxdiv.h")
+
+find_package(gflags CONFIG REQUIRED) # gflags::gflags
+find_package(glog CONFIG REQUIRED) # glog::glog
+find_package(unofficial-cpuinfo CONFIG REQUIRED) # unofficial::cpuinfo::clog unofficial::cpuinfo::cpuinfo
+find_package(unofficial-pthreadpool CONFIG REQUIRED) # unofficial::pthreadpool
+list(APPEND Caffe2_DEPENDENCY_LIBS
+  gflags::gflags glog::glog
+  unofficial::cpuinfo::clog unofficial::cpuinfo::cpuinfo unofficial::pthreadpool
+)
+link_directories(
+  $<$<CONFIG:Debug>:${_VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}/debug/lib>
+  $<$<CONFIG:Release>:${_VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}/lib>
+)
+
+set(USE_PTHREADPOOL 1)
+set(USE_INTERNAL_PTHREADPOOL_IMPL 0)
+add_compile_definitions(USE_PTHREADPOOL)
+
+find_package(fmt CONFIG REQUIRED) # fmt::fmt-header-only
+list(APPEND Caffe2_DEPENDENCY_LIBS fmt::fmt-header-only)
+
+if(BLAS STREQUAL "Accelerate")
+  set(WITH_BLAS "accelerate")
+  find_package(BLAS REQUIRED) # cmake/Modules/FindBLAS.cmake
+  find_package(LAPACK REQUIRED) # cmake/Modules/FindLAPACK.cmake
+  set(USE_LAPACK 1)
+  list(APPEND Caffe2_PRIVATE_DEPENDENCY_LIBS ${LAPACK_LIBRARIES})
+
+elseif(BLAS STREQUAL "Eigen")
+  find_package(Eigen3 CONFIG REQUIRED) # Eigen3::Eigen
+  include_directories(SYSTEM ${EIGEN3_INCLUDE_DIR})
+  list(APPEND Caffe2_DEPENDENCY_LIBS Eigen3::Eigen)
+  set(CAFFE2_USE_EIGEN_FOR_BLAS 1)
+
+elseif(BLAS STREQUAL "MKL")
+  if(USE_TBB)
+    set(MKL_THREADING "TBB")
+  else()
+    set(MKL_THREADING "SEQ")
+  endif()
+  find_package(MKL REQUIRED)
+  include(${CMAKE_CURRENT_LIST_DIR}/public/mkl.cmake)
+  include_directories(AFTER SYSTEM ${MKL_INCLUDE_DIR})
+  list(APPEND Caffe2_PUBLIC_DEPENDENCY_LIBS caffe2::mkl)
+
+endif()
+
+if(USE_MKLDNN)
+  find_package(MKLDNN REQUIRED) # BLAS::BLAS
+  include(cmake/public/mkldnn.cmake)
+  include_directories(AFTER SYSTEM ${MKLDNN_INCLUDE_DIR})
+  list(APPEND Caffe2_PUBLIC_DEPENDENCY_LIBS caffe2::mkldnn)
+endif()
+
+if(USE_TBB)
+  find_package(TBB CONFIG REQUIRED) # TBB::tbb
+  list(APPEND Caffe2_DEPENDENCY_LIBS TBB::tbb)
+endif()
+
+if(USE_NNPACK)
+  find_library(NNPACK_LIB NAME nnpack REQUIRED)
+  list(APPEND Caffe2_DEPENDENCY_LIBS ${NNPACK_LIB})
+  string(APPEND CMAKE_CXX_FLAGS " -DUSE_NNPACK")
+endif()
 
 if(USE_FBGEMM)
+  find_package(asmjit CONFIG REQUIRED) # asmjit::asmjit (required by fbgemm)
+  find_package(fbgemmLibrary CONFIG REQUIRED) # fbgemm
+  list(APPEND Caffe2_DEPENDENCY_LIBS asmjit::asmjit fbgemm)
   string(APPEND CMAKE_CXX_FLAGS " -DUSE_FBGEMM")
+  if(USE_CUDA)
+    # todo: fbgemm-gpu
+  endif()
+endif()
+
+if(USE_LMDB)
+  find_package(lmdb CONFIG REQUIRED) # lmdb
+  list(APPEND Caffe2_DEPENDENCY_LIBS lmdb)
+endif()
+
+if(USE_LEVELDB)
+  find_package(leveldb CONFIG REQUIRED) # leveldb::leveldb
+  find_package(Snappy CONFIG REQUIRED) # Snappy::snappy
+  list(APPEND Caffe2_DEPENDENCY_LIBS leveldb::leveldb Snappy::snappy)
 endif()
 
 if(USE_QNNPACK)
+  find_library(QNNPACK_LIB NAME qnnpack REQUIRED)
+  list(APPEND Caffe2_DEPENDENCY_LIBS ${QNNPACK_LIB})
   string(APPEND CMAKE_CXX_FLAGS " -DUSE_QNNPACK")
 endif()
 
@@ -576,10 +671,51 @@ if(USE_PYTORCH_QNNPACK)
 endif()
 
 if(USE_XNNPACK)
+  find_package(xnnpack CONFIG REQUIRED) # unofficial::XNNPACK
+  list(APPEND Caffe2_DEPENDENCY_LIBS unofficial::XNNPACK)
   string(APPEND CMAKE_CXX_FLAGS " -DUSE_XNNPACK")
 endif()
 
+if(USE_ZSTD)
+  find_package(zstd CONFIG REQUIRED) # zstd::libzstd_static
+  list(APPEND Caffe2_DEPENDENCY_LIBS zstd::libzstd_static)
+endif()
+
+if(USE_SYSTEM_ONNX)
+  find_package(ONNX CONFIG REQUIRED) # onnx onnx_proto onnxifi_loader
+  find_package(ONNXOptimizer CONFIG REQUIRED) # onnx_optimizer
+  list(APPEND Caffe2_DEPENDENCY_LIBS onnx onnx_proto onnxifi_loader onnx_optimizer)
+  if(ONNX_ML)
+    add_compile_definitions(ONNX_ML=1)
+  endif()
+endif()
+
+if(USE_CUDA)
+  find_package(CUDA  10.1 REQUIRED) # https://cmake.org/cmake/help/latest/module/FindCUDA.html
+  find_package(CUDNN 8.0  REQUIRED) # CuDNN::CuDNN
+  cuda_select_nvcc_arch_flags(ARCH_FLAGS 7.5 7.5+PTX)
+  set(CUDA_NVCC_FLAGS ${ARCH_FLAGS})
+  list(APPEND CUDA_NVCC_FLAGS    # check TORCH_NVCC_FLAGS in this project
+    -D__CUDA_NO_HALF_OPERATORS__ # see https://github.com/torch/cutorch/issues/797
+  )
+  set(CAFFE2_USE_CUDNN 1)
+  include(cmake/public/cuda.cmake)
+  list(APPEND Caffe2_DEPENDENCY_LIBS CuDNN::CuDNN)
+endif()
+
+if(USE_NUMA) # Linux package 'libnuma-dev'
+  find_package(Numa REQUIRED)
+  include_directories(SYSTEM ${Numa_INCLUDE_DIR})
+  list(APPEND Caffe2_DEPENDENCY_LIBS ${Numa_LIBRARIES})
+endif()
+
+if(USE_GLOO)
+  find_package(Gloo CONFIG REQUIRED)
+  list(APPEND Caffe2_DEPENDENCY_LIBS gloo)
+endif()
+
 if(USE_VULKAN)
+  find_package(Vulkan REQUIRED)
   string(APPEND CMAKE_CXX_FLAGS " -DUSE_VULKAN")
   string(APPEND CMAKE_CXX_FLAGS " -DUSE_VULKAN_API")
 
