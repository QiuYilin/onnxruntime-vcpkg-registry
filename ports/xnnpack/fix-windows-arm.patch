diff --git a/src/jit/aarch32-assembler.cc b/src/jit/aarch32-assembler.cc
index 0fc786b..d9c406b 100644
--- a/src/jit/aarch32-assembler.cc
+++ b/src/jit/aarch32-assembler.cc
@@ -254,11 +254,11 @@ void Assembler::tst(CoreRegister rn, uint8_t imm) {
   emit32(kAL | 0x31 << 20 | rn.code << 16 | imm);
 }
 
-void Assembler::vabs_f32(QRegister qd, QRegister qm) {
+void Assembler::vabs_f32_(QRegister qd, QRegister qm) {
   emit32(0xF3B90740 | encode(qd, 22, 12) | encode(qm, 5, 0));
 }
 
-void Assembler::vadd_f32(QRegister qd, QRegister qn, QRegister qm) {
+void Assembler::vadd_f32_(QRegister qd, QRegister qn, QRegister qm) {
   emit32(0xF2000D40 | encode(qd, 22, 12) | encode(qn, 7, 16) | encode(qm, 5, 0));
 }
 
@@ -266,15 +266,15 @@ void Assembler::vcmpe_f32(SRegister sd, SRegister sm) {
   emit32(kAL | 0x0EB40AC0 | encode(sd, 22, 12) | encode(sm, 5, 0));
 }
 
-void Assembler::vcvt_f32_s32(QRegister qd, QRegister qm) {
+void Assembler::vcvt_f32_s32_(QRegister qd, QRegister qm) {
   emit32(0xF3BB0640 | encode(qd, 22, 12) | encode(qm, 5, 0));
 }
 
-void Assembler::vcvt_s32_f32(QRegister qd, QRegister qm) {
+void Assembler::vcvt_s32_f32_(QRegister qd, QRegister qm) {
   emit32(0xF3BB0740 | encode(qd, 22, 12) | encode(qm, 5, 0));
 }
 
-void Assembler::vcvtn_s32_f32(QRegister qd, QRegister qm) {
+void Assembler::vcvtn_s32_f32_(QRegister qd, QRegister qm) {
   emit32(0xF3BB0140 | encode(qd, 22, 12) | encode(qm, 5, 0));
 }
 
@@ -419,27 +419,27 @@ void Assembler::vldr(DRegister dd, MemOperand op) {
   emit32(kAL | 0x0D100B00 | op.u() << 23 | encode(dd, 22, 12) | op.base().code << 16 | offset >> 2);
 }
 
-void Assembler::vmax_f32(QRegister qd, QRegister qn, QRegister qm) {
+void Assembler::vmax_f32_(QRegister qd, QRegister qn, QRegister qm) {
   emit32(0xF2000F40 | encode(qd, 22, 12) | encode(qn, 7, 16) | encode(qm, 5, 0));
 }
 
-void Assembler::vmax_s8(QRegister qd, QRegister qn, QRegister qm) {
+void Assembler::vmax_s8_(QRegister qd, QRegister qn, QRegister qm) {
  emit32(0xF2000640 | encode(qd, 22, 12) | encode(qn, 7, 16) | encode(qm, 5, 0));
 }
 
-void Assembler::vmin_f32(QRegister qd, QRegister qn, QRegister qm) {
+void Assembler::vmin_f32_(QRegister qd, QRegister qn, QRegister qm) {
   emit32(0xF2200F40 | encode(qd, 22, 12) | encode(qn, 7, 16) | encode(qm, 5, 0));
 }
 
-void Assembler::vmin_s8(QRegister qd, QRegister qn, QRegister qm) {
+void Assembler::vmin_s8_(QRegister qd, QRegister qn, QRegister qm) {
  emit32(0xF2000650 | encode(qd, 22, 12) | encode(qn, 7, 16) | encode(qm, 5, 0));
 }
 
-void Assembler::vmla_f32(SRegister sd, SRegister sn, SRegister sm) {
+void Assembler::vmla_f32_(SRegister sd, SRegister sn, SRegister sm) {
   emit32(kAL | 0x0E000A00 | encode(sd, 22, 12) | encode (sn, 7, 16) | encode(sm, 5, 0));
 }
 
-void Assembler::vmla_f32(QRegister qd, QRegister qn, DRegisterLane dm) {
+void Assembler::vmla_f32_(QRegister qd, QRegister qn, DRegisterLane dm) {
   if (dm.lane > 1) {
     error_ = Error::kInvalidLaneIndex;
     return;
@@ -447,7 +447,7 @@ void Assembler::vmla_f32(QRegister qd, QRegister qn, DRegisterLane dm) {
   emit32(0xF3A00140 | encode(qd, 22, 12) | encode(qn, 7, 16) | dm.lane << 5 | dm.code);
 }
 
-void Assembler::vmlal_s16(QRegister qd, DRegister dn, DRegisterLane dm) {
+void Assembler::vmlal_s16_(QRegister qd, DRegister dn, DRegisterLane dm) {
   if (dm.lane > 3) {
     error_ = Error::kInvalidLaneIndex;
     return;
@@ -495,7 +495,7 @@ void Assembler::vmov_f64(DRegister dd, DRegister dm) {
   emit32(kAL | 0x0EB00B40 | encode(dd, 22, 12) | encode(dm, 5, 0));
 }
 
-void Assembler::vmovl_s8(QRegister qd, DRegister dm) {
+void Assembler::vmovl_s8_(QRegister qd, DRegister dm) {
   emit32(0xF2880A10 | encode(qd, 22, 12) | encode(dm, 5, 0));
 }
 
@@ -503,11 +503,11 @@ void Assembler::vmrs(CoreRegister rt, SpecialFPRegister spec_reg) {
   emit32(kAL | 0x0EF00A10 | static_cast<uint32_t>(spec_reg) << 16 | rt.code << 12);
 }
 
-void Assembler::vmul_f32(QRegister qd, QRegister qn, QRegister qm) {
+void Assembler::vmul_f32_(QRegister qd, QRegister qn, QRegister qm) {
   emit32(0xF3000D50 | encode(qd, 22, 12) | encode(qn, 7, 16) | encode(qm, 5, 0));
 }
 
-void Assembler::vneg_f32(QRegister qd, QRegister qm) {
+void Assembler::vneg_f32_(QRegister qd, QRegister qm) {
   emit32(0xF3B907C0 | encode(qd, 22, 12) | encode(qm, 5, 0));
 }
 
@@ -535,11 +535,11 @@ void Assembler::vpush(SRegisterList regs) {
   emit32(kAL | encode(regs, 22, 12) | 0xD2D << 16 | 0xA << 8);
 }
 
-void Assembler::vqadd_s16(QRegister qd, QRegister qn, QRegister qm) {
+void Assembler::vqadd_s16_(QRegister qd, QRegister qn, QRegister qm) {
   emit32(0xF2100050 | encode(qd, 22, 12) | encode(qn, 7, 16) | encode(qm, 5, 0));
 }
 
-void Assembler::vqdmulh_s32(QRegister qd, QRegister qn, DRegisterLane dm) {
+void Assembler::vqdmulh_s32_(QRegister qd, QRegister qn, DRegisterLane dm) {
   if (dm.code > 15) {
     error_ = Error::kInvalidOperand;
     return;
@@ -551,19 +551,20 @@ void Assembler::vqdmulh_s32(QRegister qd, QRegister qn, DRegisterLane dm) {
   emit32(0xF3A00C40 | encode(qd, 22, 12) | encode(qn, 7, 16) | dm.lane << 5 | dm.code);
 }
 
-void Assembler::vqmovn_s16(DRegister dd, QRegister qm) {
+void Assembler::vqmovn_s16_(DRegister dd, QRegister qm) {
   emit32(0xF3B20280 | encode(dd, 22, 12) | encode(qm, 5, 0));
 }
 
-void Assembler::vqmovn_s32(DRegister dd, QRegister qm) {
+void Assembler::vqmovn_s32_(DRegister dd, QRegister qm) {
   emit32(0xF3B60280 | encode(dd, 22, 12) | encode(qm, 5, 0));
 }
 
-void Assembler::vqshl_s32(QRegister qd, QRegister qm, QRegister qn) {
+void Assembler::vqshl_s32_(QRegister qd, QRegister qm, QRegister qn) {
   emit32(0xF2200450 | encode(qd, 22, 12) | encode(qm, 5, 0) | encode(qn, 7, 16));
 }
 
-void Assembler::vrshl_s32(QRegister qd, QRegister qm, QRegister qn) {
+void Assembler::vrshl_s32_(QRegister qd, QRegister qm, QRegister qn)
+{
   emit32(0xF2200540 | encode(qd, 22, 12) | encode(qm, 5, 0) | encode(qn, 7, 16));
 }
 
diff --git a/src/xnnpack/aarch32-assembler.h b/src/xnnpack/aarch32-assembler.h
index fe8d72b..d3a1812 100644
--- a/src/xnnpack/aarch32-assembler.h
+++ b/src/xnnpack/aarch32-assembler.h
@@ -405,12 +405,12 @@ class Assembler : public AssemblerBase {
   void tst(CoreRegister rn, uint8_t imm);
 
   // SIMD instructions.
-  void vabs_f32(QRegister qd, QRegister qm);
-  void vadd_f32(QRegister qd, QRegister qn, QRegister qm);
+  void vabs_f32_(QRegister qd, QRegister qm);
+  void vadd_f32_(QRegister qd, QRegister qn, QRegister qm);
   void vcmpe_f32(SRegister sd, SRegister sm);
-  void vcvt_f32_s32(QRegister qd, QRegister qm);
-  void vcvt_s32_f32(QRegister qd, QRegister qm);
-  void vcvtn_s32_f32(QRegister qd, QRegister qm);
+  void vcvt_f32_s32_(QRegister qd, QRegister qm);
+  void vcvt_s32_f32_(QRegister qd, QRegister qm);
+  void vcvtn_s32_f32_(QRegister qd, QRegister qm);
   void vdup_8(QRegister qd, DRegisterLane dm) { vdup(k8, qd, dm); }
   void vdup_16(QRegister qd, DRegisterLane dm) { vdup(k16, qd, dm); }
   void vdup_32(QRegister qd, DRegisterLane dm) { vdup(k32, qd, dm); }
@@ -434,16 +434,16 @@ class Assembler : public AssemblerBase {
   void vldm(MemOperand rn, DRegisterList regs);
   void vldr(SRegister sd, MemOperand op);
   void vldr(DRegister dd, MemOperand op);
-  void vmax_f32(QRegister qd, QRegister qn, QRegister qm);
-  void vmax_s8(QRegister qd, QRegister qn, QRegister qm);
-  void vmin_f32(QRegister qd, QRegister qn, QRegister qm);
-  void vmin_s8(QRegister qd, QRegister qn, QRegister qm);
+  void vmax_f32_(QRegister qd, QRegister qn, QRegister qm);
+  void vmax_s8_(QRegister qd, QRegister qn, QRegister qm);
+  void vmin_f32_(QRegister qd, QRegister qn, QRegister qm);
+  void vmin_s8_(QRegister qd, QRegister qn, QRegister qm);
   // VMLA.F32 <Sd>, <Sn>, <Sm>
-  void vmla_f32(SRegister sd, SRegister sn, SRegister sm);
+  void vmla_f32_(SRegister sd, SRegister sn, SRegister sm);
   // VMLA.F32 <Qd>, <Qn>, <Dm[x]>
-  void vmla_f32(QRegister qd, QRegister qn, DRegisterLane dm);
+  void vmla_f32_(QRegister qd, QRegister qn, DRegisterLane dm);
   // VMLAL.S16 <Qd>, <Dn>, <Dm[x]>
-  void vmlal_s16(QRegister qd, DRegister dn, DRegisterLane dm);
+  void vmlal_s16_(QRegister qd, DRegister dn, DRegisterLane dm);
   // VMOV.F32 <Qd>, #<imm>; encoding A1
   void vmov(QRegister qd, uint8_t imm);
   // VMOV.F32 <Sd>, <Sm>; encoding A2.
@@ -461,19 +461,19 @@ class Assembler : public AssemblerBase {
   // VMOV_F64 <Dd>, <Dm>
   void vmov_f64(DRegister dd, DRegister dm);
   // VMOVL.S8 <Qd>, <Dm>
-  void vmovl_s8(QRegister qd, DRegister dm);
+  void vmovl_s8_(QRegister qd, DRegister dm);
   void vmrs(CoreRegister rt, SpecialFPRegister spec_reg);
-  void vmul_f32(QRegister qd, QRegister qn, QRegister qm);
-  void vneg_f32(QRegister qd, QRegister qm);
+  void vmul_f32_(QRegister qd, QRegister qn, QRegister qm);
+  void vneg_f32_(QRegister qd, QRegister qm);
   void vpop(DRegisterList regs);
   void vpush(DRegisterList regs);
   void vpush(SRegisterList regs);
-  void vqadd_s16(QRegister qd, QRegister qn, QRegister qm);
-  void vqdmulh_s32(QRegister qd, QRegister qn, DRegisterLane dm);
-  void vqmovn_s16(DRegister dd, QRegister qm);
-  void vqmovn_s32(DRegister dd, QRegister qm);
-  void vqshl_s32(QRegister qd, QRegister qm, QRegister qn);
-  void vrshl_s32(QRegister qd, QRegister qm, QRegister qn);
+  void vqadd_s16_(QRegister qd, QRegister qn, QRegister qm);
+  void vqdmulh_s32_(QRegister qd, QRegister qn, DRegisterLane dm);
+  void vqmovn_s16_(DRegister dd, QRegister qm);
+  void vqmovn_s32_(DRegister dd, QRegister qm);
+  void vqshl_s32_(QRegister qd, QRegister qm, QRegister qn);
+  void vrshl_s32_(QRegister qd, QRegister qm, QRegister qn);
   void vsdot_s8(QRegister qd, QRegister qn, DRegisterLane dm);
   // VST1.8 <list>, [<Rn>]{!} (multiple single elements).
   void vst1_8(DRegisterList regs, MemOperand op) { vst1(k8, regs, op); }
diff --git a/CMakeLists.txt b/CMakeLists.txt
index d4b0602..e24d6c0 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -6,10 +6,11 @@
 # This source code is licensed under the BSD-style license found in the
 # LICENSE file in the root directory of this source tree.
 
-CMAKE_MINIMUM_REQUIRED(VERSION 3.15 FATAL_ERROR)
+CMAKE_MINIMUM_REQUIRED(VERSION 3.20 FATAL_ERROR)
 
 # MSVC runtime library flags are selected by an abstraction.
 CMAKE_POLICY(SET CMP0091 NEW)
+cmake_policy(SET CMP0119 NEW) # Force LANGUAGE ASM
 
 # ---[ Project and semantic versioning.
 PROJECT(XNNPACK C CXX ASM)
@@ -62,6 +63,8 @@ ADD_COMPILE_DEFINITIONS("XNN_ENABLE_GEMM_M_SPECIALIZATION=$<BOOL:${XNNPACK_ENABL
 IF(CMAKE_C_COMPILER_ID STREQUAL "MSVC")
   # Disable "unary minus operator applied to unsigned type, result still unsigned" warning
   ADD_COMPILE_OPTIONS("/wd4146")
+  add_compile_definitions(__builtin_prefetch=__prefetch)
+  link_libraries(Kernel32)
 ENDIF()
 
 IF(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
@@ -7058,19 +7061,32 @@ IF(XNNPACK_TARGET_PROCESSOR MATCHES "^(aarch64|arm64)$" OR IOS_ARCH MATCHES "^ar
   LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_NEONV8_MICROKERNEL_SRCS})
   LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_AARCH64_NEON_MICROKERNEL_SRCS})
   IF(XNNPACK_ENABLE_ARM_FP16)
+    LIST(APPEND PROD_MICROKERNEL_SRCS ${ALL_NEONFP16ARITH_MICROKERNEL_SRCS})
+    LIST(APPEND PROD_MICROKERNEL_SRCS ${ALL_AARCH64_NEONFP16ARITH_MICROKERNEL_SRCS})
     LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_NEONFP16ARITH_MICROKERNEL_SRCS})
     LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_AARCH64_NEONFP16ARITH_MICROKERNEL_SRCS})
   ENDIF()
   IF(XNNPACK_ENABLE_ARM_BF16)
+    LIST(APPEND PROD_MICROKERNEL_SRCS ${ALL_NEONBF16_MICROKERNEL_SRCS})
     LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_NEONBF16_MICROKERNEL_SRCS})
   ENDIF()
   IF(XNNPACK_ENABLE_ARM_DOTPROD)
+    LIST(APPEND PROD_MICROKERNEL_SRCS ${ALL_NEONDOT_MICROKERNEL_SRCS})
     LIST(APPEND ALL_MICROKERNEL_SRCS ${ALL_NEONDOT_MICROKERNEL_SRCS})
   ENDIF()
   IF(XNNPACK_ENABLE_ASSEMBLY)
     LIST(APPEND PROD_MICROKERNEL_SRCS ${AARCH64_ASM_MICROKERNEL_SRCS})
     LIST(APPEND ALL_MICROKERNEL_SRCS ${AARCH64_ASM_MICROKERNEL_SRCS})
-  ENDIF()
+  else()
+    # init.c link error for arm64-windows
+    list(APPEND PROD_MICROKERNEL_SRCS
+      ${ALL_NEON_MICROKERNEL_SRCS}
+      ${ALL_NEONFP16_MICROKERNEL_SRCS}
+      ${ALL_NEONFMA_MICROKERNEL_SRCS}
+      ${ALL_NEONV8_MICROKERNEL_SRCS}
+      ${ALL_AARCH64_NEON_MICROKERNEL_SRCS}
+    )
+  endif()
   LIST(APPEND JIT_SRCS ${JIT_AARCH64_SRCS})
 ENDIF()
 IF(XNNPACK_TARGET_PROCESSOR MATCHES "^(i[3-6]86|x86_64|AMD64)$" OR IOS_ARCH MATCHES "^(i386|x86_64|AMD64)$")
@@ -7131,21 +7147,27 @@ IF(NOT MSVC)
   SET_PROPERTY(SOURCE ${PROD_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -fno-math-errno ")
 ENDIF()
 IF(CMAKE_SYSTEM_PROCESSOR MATCHES "^armv[5-8]" OR IOS_ARCH MATCHES "^armv7")
-  SET_PROPERTY(SOURCE ${ALL_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -marm ")
-  SET_PROPERTY(SOURCE ${ALL_ARMSIMD32_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv6 -mfpu=vfp -munaligned-access ")
-  SET_PROPERTY(SOURCE ${ALL_NEON_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv7-a -mfpu=neon ")
-  SET_PROPERTY(SOURCE ${ALL_NEONFP16_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv7-a -mfpu=neon-fp16 ")
+  if(NOT MSVC)
+    SET_PROPERTY(SOURCE ${ALL_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -marm ")
+    SET_PROPERTY(SOURCE ${ALL_ARMSIMD32_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv6 -mfpu=vfp -munaligned-access ")
+    SET_PROPERTY(SOURCE ${ALL_NEON_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv7-a -mfpu=neon ")
+    SET_PROPERTY(SOURCE ${ALL_NEONFP16_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv7-a -mfpu=neon-fp16 ")
+  endif()
   # GCC requires -mfp16-format=ieee to define __fp16 type, but Clang doesn't support this option at all.
   IF(CMAKE_C_COMPILER_ID STREQUAL "GNU")
     SET_PROPERTY(SOURCE ${ALL_NEONFP16_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mfp16-format=ieee ")
     SET_PROPERTY(SOURCE ${ALL_NEONFP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mfp16-format=ieee ")
   ENDIF()
-  SET_PROPERTY(SOURCE ${ALL_NEONFMA_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv7-a -mfpu=neon-vfpv4 ")
-  SET_PROPERTY(SOURCE ${ALL_NEONV8_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8-a -mfpu=neon-fp-armv8 ")
-  SET_PROPERTY(SOURCE ${ALL_NEONFP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+fp16 -mfpu=neon-fp-armv8 ")
-  SET_PROPERTY(SOURCE ${ALL_NEONBF16_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+bf16 -mfpu=neon-fp-armv8 ")
-  SET_PROPERTY(SOURCE ${ALL_NEONDOT_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+dotprod -mfpu=neon-fp-armv8 ")
-  SET_PROPERTY(SOURCE ${AARCH32_ASM_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+dotprod -mfpu=neon-fp-armv8 ")
+  if(MSVC)
+    set_source_files_properties(${AARCH32_ASM_MICROKERNEL_SRCS} PROPERTIES LANGUAGE ASM)
+  else()
+    SET_PROPERTY(SOURCE ${ALL_NEONFMA_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv7-a -mfpu=neon-vfpv4 ")
+    SET_PROPERTY(SOURCE ${ALL_NEONV8_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8-a -mfpu=neon-fp-armv8 ")
+    SET_PROPERTY(SOURCE ${ALL_NEONFP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+fp16 -mfpu=neon-fp-armv8 ")
+    SET_PROPERTY(SOURCE ${ALL_NEONBF16_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+bf16 -mfpu=neon-fp-armv8 ")
+    SET_PROPERTY(SOURCE ${ALL_NEONDOT_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+dotprod -mfpu=neon-fp-armv8 ")
+    SET_PROPERTY(SOURCE ${AARCH32_ASM_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+dotprod -mfpu=neon-fp-armv8 ")
+  endif()
   # Workground the neon detection bug in ARM v8
   # Related links:
   #   https://github.com/android/ndk/issues/910
@@ -7159,11 +7181,15 @@ IF(CMAKE_SYSTEM_PROCESSOR MATCHES "^armv[5-8]" OR IOS_ARCH MATCHES "^armv7")
   ENDIF()
 ENDIF()
 IF(XNNPACK_TARGET_PROCESSOR MATCHES "^(aarch64|arm64)$" OR IOS_ARCH MATCHES "^arm64.*")
-  SET_PROPERTY(SOURCE ${ALL_NEONFP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+fp16 ")
-  SET_PROPERTY(SOURCE ${ALL_AARCH64_NEONFP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+fp16 ")
-  SET_PROPERTY(SOURCE ${ALL_NEONBF16_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+bf16 ")
-  SET_PROPERTY(SOURCE ${ALL_NEONDOT_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+dotprod ")
-  SET_PROPERTY(SOURCE ${AARCH64_ASM_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+fp16+dotprod ")
+  if(MSVC)
+    set_source_files_properties(${AARCH64_ASM_MICROKERNEL_SRCS} PROPERTIES LANGUAGE ASM)
+  else()
+    SET_PROPERTY(SOURCE ${ALL_NEONFP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+fp16 ")
+    SET_PROPERTY(SOURCE ${ALL_AARCH64_NEONFP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+fp16 ")
+    SET_PROPERTY(SOURCE ${ALL_NEONBF16_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+bf16 ")
+    SET_PROPERTY(SOURCE ${ALL_NEONDOT_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+dotprod ")
+    SET_PROPERTY(SOURCE ${AARCH64_ASM_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+fp16+dotprod ")
+  endif()
   IF(IOS)
     SET_PROPERTY(SOURCE ${AARCH64_ASM_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -arch ${IOS_ARCH} ")
   ENDIF()
diff --git a/src/xnnpack/common.h b/src/xnnpack/common.h
index 663342d..04c3317 100644
--- a/src/xnnpack/common.h
+++ b/src/xnnpack/common.h
@@ -122,7 +122,7 @@
   #define XNN_PLATFORM_FUCHSIA 0
 #endif
 
-#if (XNN_ARCH_ARM || XNN_ARCH_ARM64) && !XNN_PLATFORM_IOS && !XNN_PLATFORM_FUCHSIA
+#if (XNN_ARCH_ARM || XNN_ARCH_ARM64) && !XNN_PLATFORM_IOS && !XNN_PLATFORM_FUCHSIA && !XNN_PLATFORM_WINDOWS
   #define XNN_PLATFORM_JIT 1
 #else
   #define XNN_PLATFORM_JIT 0
