diff --git a/CMakeLists.txt b/CMakeLists.txt
index d7e1786..a171d5d 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -77,7 +77,7 @@ IF(NOT CMAKE_SYSTEM_NAME)
       "Target operating system is not specified. "
       "cpuinfo will compile, but cpuinfo_initialize() will always fail.")
   SET(CPUINFO_SUPPORTED_PLATFORM FALSE)
-ELSEIF(NOT CMAKE_SYSTEM_NAME MATCHES "^(Windows|CYGWIN|MSYS|Darwin|Linux|Android)$")
+ELSEIF(NOT CMAKE_SYSTEM_NAME MATCHES "^(Windows|WindowsStore|CYGWIN|MSYS|Darwin|Linux|Android)$")
   IF(${CMAKE_VERSION} VERSION_GREATER_EQUAL "3.14" AND NOT CMAKE_SYSTEM_NAME STREQUAL "iOS")
     MESSAGE(WARNING
       "Target operating system \"${CMAKE_SYSTEM_NAME}\" is not supported in cpuinfo. "
@@ -141,7 +141,7 @@ IF(CPUINFO_SUPPORTED_PLATFORM)
         src/x86/linux/cpuinfo.c)
     ELSEIF(CMAKE_SYSTEM_NAME STREQUAL "Darwin" OR CMAKE_SYSTEM_NAME STREQUAL "iOS")
       LIST(APPEND CPUINFO_SRCS src/x86/mach/init.c)
-    ELSEIF(CMAKE_SYSTEM_NAME MATCHES "^(Windows|CYGWIN|MSYS)$")
+    ELSEIF(CMAKE_SYSTEM_NAME MATCHES "^(Windows|WindowsStore|CYGWIN|MSYS)$")
       LIST(APPEND CPUINFO_SRCS src/x86/windows/init.c)
     ENDIF()
   ELSEIF(CPUINFO_TARGET_PROCESSOR MATCHES "^(armv[5-8].*|aarch64|arm64)$" OR IOS_ARCH MATCHES "^(armv7.*|arm64.*)$")
@@ -171,7 +171,7 @@ IF(CPUINFO_SUPPORTED_PLATFORM)
       LIST(APPEND CPUINFO_SRCS
         src/arm/android/properties.c)
     ENDIF()
-  ELSEIF(CMAKE_SYSTEM_NAME STREQUAL "Windows" AND CPUINFO_TARGET_PROCESSOR STREQUAL "ARM64")
+  ELSEIF((CMAKE_SYSTEM_NAME MATCHES "Windows") AND CPUINFO_TARGET_PROCESSOR STREQUAL "ARM64")
     LIST(APPEND CPUINFO_SRCS src/arm/windows/init-by-logical-sys-info.c)
     LIST(APPEND CPUINFO_SRCS src/arm/windows/init.c)
   ENDIF()
@@ -211,10 +211,10 @@ ADD_LIBRARY(cpuinfo_internals STATIC ${CPUINFO_SRCS})
 CPUINFO_TARGET_ENABLE_C99(cpuinfo)
 CPUINFO_TARGET_ENABLE_C99(cpuinfo_internals)
 CPUINFO_TARGET_RUNTIME_LIBRARY(cpuinfo)
-IF(CMAKE_SYSTEM_NAME MATCHES "^(Windows|CYGWIN|MSYS)$")
+IF(CMAKE_SYSTEM_NAME MATCHES "^(Windows|WindowsStore|CYGWIN|MSYS)$")
   # Target Windows 7+ API
-  TARGET_COMPILE_DEFINITIONS(cpuinfo PRIVATE _WIN32_WINNT=0x0601)
-  TARGET_COMPILE_DEFINITIONS(cpuinfo_internals PRIVATE _WIN32_WINNT=0x0601)
+  TARGET_COMPILE_DEFINITIONS(cpuinfo PRIVATE _WIN32_WINNT=0x0601 _CRT_SECURE_NO_WARNINGS)
+  TARGET_COMPILE_DEFINITIONS(cpuinfo_internals PRIVATE _WIN32_WINNT=0x0601 _CRT_SECURE_NO_WARNINGS)
 ENDIF()
 SET_TARGET_PROPERTIES(cpuinfo PROPERTIES PUBLIC_HEADER include/cpuinfo.h)
 TARGET_INCLUDE_DIRECTORIES(cpuinfo BEFORE PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include> $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)
diff --git a/src/x86/name.c b/src/x86/name.c
index 957a0d8..6942c41 100644
--- a/src/x86/name.c
+++ b/src/x86/name.c
@@ -8,7 +8,6 @@
 #include <cpuinfo/common.h>
 #include <x86/api.h>
 
-
 /* The state of the parser to be preserved between parsing different tokens. */
 struct parser_state {
 	/*
@@ -581,7 +580,7 @@ uint32_t cpuinfo_x86_normalize_brand_string(
 	/* Iterate through all tokens and erase redundant parts */
 	{
 		bool is_token = false;
-		char* token_start;
+		char* token_start = NULL;
 		for (char* char_ptr = name; char_ptr != name_end; char_ptr++) {
 			if (*char_ptr == ' ') {
 				if (is_token) {
@@ -619,7 +618,7 @@ uint32_t cpuinfo_x86_normalize_brand_string(
 	/* Compact tokens: collapse multiple spacing into one */
 	{
 		char* output_ptr = normalized_name;
-		char* token_start;
+		char* token_start = NULL;
 		bool is_token = false;
 		bool previous_token_ends_with_dash = true;
 		bool current_token_starts_with_dash = false;
