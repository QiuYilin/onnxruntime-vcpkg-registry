#
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema
# https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables
# https://github.com/actions/virtual-environments/tree/main/images
# https://github.com/lukka/CppBuildTasks
#

trigger:
  branches:
    exclude:
      - docs
      - gh-pages

# pr:
#   - main

schedules:
  - cron: "10 4 * * 6"
    displayName: "Weekly check"
    branches:
      include:
        - main

variables:
  - name: vcpkg.commit
    value: "cef0b3ec767df6e83806899fe9525f6cf8d7bc91" # mainstream 2022.06.16.1
  - name: vcpkg.overlay.ports # == VCPKG_OVERLAY_PORTS
    value: $(Build.SourcesDirectory)/ports # --overlay-ports $(Build.SourcesDirectory)/ports
  - name: vcpkg.disable.metrics
    value: "true"
  - name: vcpkg.feature.flags
    value: "binarycaching,manifest"

stages:
  - stage: "Triplets"
    jobs:
      - job: "triplet_android"
        displayName: "Android"
        pool:
          vmImage: ubuntu-22.04
        variables:
          - name: vcpkg.overlay.triplets # VCPKG_OVERLAY_TRIPLETS
            value: $(Build.SourcesDirectory)/triplets # --overlay-triplets $(Build.SourcesDirectory)/triplets
        steps:
          - task: run-vcpkg@0
            displayName: "arm64-android: vulkan-android-test"
            inputs:
              vcpkgArguments: "vulkan-android-test"
              vcpkgGitCommitId: $(vcpkg.commit)
            env:
              VCPKG_DEFAULT_TRIPLET: arm64-android # --triplet ${triplet}
          - task: run-vcpkg@0
            displayName: "x64-android: vulkan-android-test"
            inputs:
              vcpkgArguments: "vulkan-android-test"
              vcpkgGitCommitId: $(vcpkg.commit)
            env:
              VCPKG_DEFAULT_TRIPLET: x64-android

      - job: "triplet_ios_simulator"
        displayName: "iOS Simulator"
        pool:
          vmImage: macOS-11
        variables:
          - name: vcpkg.overlay.triplets # VCPKG_OVERLAY_TRIPLETS
            value: $(Build.SourcesDirectory)/triplets # --overlay-triplets $(Build.SourcesDirectory)/triplets
        steps:
          - task: run-vcpkg@0
            displayName: "arm64-ios-simulator: zlib-ng"
            inputs:
              vcpkgArguments: "zlib-ng --debug"
              vcpkgGitCommitId: $(vcpkg.commit)
            env:
              VCPKG_DEFAULT_TRIPLET: arm64-ios-simulator
          - task: run-vcpkg@0
            displayName: "x64-ios-simulator: zlib-ng"
            inputs:
              vcpkgArguments: "zlib-ng --debug"
              vcpkgGitCommitId: $(vcpkg.commit)
            env:
              VCPKG_DEFAULT_TRIPLET: x64-ios-simulator

  - stage: "Ports" # Check build status of the ports
    jobs:
      - job: "port_windows"
        displayName: "Windows"
        pool:
          vmImage: windows-2022
        strategy:
          matrix:
            x64_windows:
              vcpkg.default.triplet: "x64-windows"
            x86_windows:
              vcpkg.default.triplet: "x86-windows"
            x64_uwp:
              vcpkg.default.triplet: "x64-uwp"
        steps:
          - task: UsePythonVersion@0
            displayName: "Setup: Python 3.10"
            inputs:
              versionSpec: "3.10"
              addToPath: true
              architecture: "x64"
          - powershell: pip install typing-extensions pybind11 numpy pyyaml
            displayName: "Install Python packages"
          - task: run-vcpkg@0
            inputs:
              vcpkgArguments: "zlib-ng"
              vcpkgGitCommitId: $(vcpkg.commit)
          - task: run-vcpkg@0
            displayName: "libdispatch"
            inputs:
              vcpkgArguments: "libdispatch"
              vcpkgGitCommitId: $(vcpkg.commit)
            condition: ne(variables['vcpkg.default.triplet'], 'x64-uwp')
          - task: run-vcpkg@0
            displayName: "openssl3"
            inputs:
              vcpkgArguments: "openssl3"
              vcpkgGitCommitId: $(vcpkg.commit)
          - task: run-vcpkg@0
            displayName: "tensorflow-lite"
            inputs:
              vcpkgArguments: "tensorflow-lite"
              vcpkgGitCommitId: $(vcpkg.commit)
          - task: run-vcpkg@0
            displayName: "tensorflow-lite"
            inputs:
              vcpkgArguments: "tensorflow-lite[google-angle,gpu] --recurse"
              vcpkgGitCommitId: $(vcpkg.commit)
            condition: ne(variables['vcpkg.default.triplet'], 'x64-uwp')
          - task: run-vcpkg@0
            displayName: "onnxruntime"
            inputs:
              vcpkgArguments: "onnxruntime[xnnpack]"
              vcpkgGitCommitId: $(vcpkg.commit)
          - task: run-vcpkg@0
            displayName: "onnxruntime"
            inputs:
              vcpkgArguments: "onnxruntime[directml,xnnpack] --recurse" #
              vcpkgGitCommitId: $(vcpkg.commit)
            condition: ne(variables['vcpkg.default.triplet'], 'x64-uwp')
          - task: CopyFiles@2
            inputs:
              SourceFolder: "$(Build.BinariesDirectory)/vcpkg/buildtrees/onnxruntime"
              Contents: |
                ?(*.log|*.txt)
                *.cmake
              TargetFolder: "$(Build.ArtifactStagingDirectory)"
              OverWrite: true
            condition: always()
          - task: PublishBuildArtifacts@1
            displayName: "Publish Staged Logs"
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)"
              ArtifactName: "$(Agent.JobName)"
            condition: always()
        timeoutInMinutes: "400"

      - job: "port_windows_arm"
        displayName: "Windows(ARM)"
        pool:
          vmImage: windows-2022
        strategy:
          matrix:
            arm64_windows:
              vcpkg.default.triplet: "arm64-windows"
            arm64_uwp:
              vcpkg.default.triplet: "arm64-uwp"
        steps:
          - task: run-vcpkg@0
            inputs:
              vcpkgArguments: "zlib-ng"
              vcpkgGitCommitId: $(vcpkg.commit)
          - task: run-vcpkg@0
            displayName: "libdispatch"
            inputs:
              vcpkgArguments: "libdispatch"
              vcpkgGitCommitId: $(vcpkg.commit)
            condition: ne(variables['vcpkg.default.triplet'], 'arm64-uwp')
          - task: run-vcpkg@0
            displayName: "openssl3"
            inputs:
              vcpkgArguments: "openssl3"
              vcpkgGitCommitId: $(vcpkg.commit)
          - task: run-vcpkg@0
            displayName: "xnnpack"
            inputs:
              vcpkgArguments: "xnnpack"
              vcpkgGitCommitId: $(vcpkg.commit)
          - task: run-vcpkg@0
            displayName: "tensorflow-lite"
            inputs:
              vcpkgArguments: "tensorflow-lite"
              vcpkgGitCommitId: $(vcpkg.commit)
        timeoutInMinutes: "400"

      - job: "port_linux"
        displayName: "Linux"
        pool:
          vmImage: ubuntu-22.04
        strategy:
          matrix:
            x64_clang14:
              vcpkg.default.triplet: "x64-linux"
              cc: clang-14
              cxx: clang++-14
            x64_gcc11:
              vcpkg.default.triplet: "x64-linux"
              cc: gcc-11
              cxx: g++-11
        steps:
          - powershell: sudo apt-get install -y nuget nasm libnuma-dev libopenmpi-dev libx11-dev libxi-dev libxext-dev libx11-xcb-dev
            displayName: "Install APT packages"
          - powershell: pip install typing-extensions pybind11 numpy pyyaml
            displayName: "Install Python packages"
          - task: run-vcpkg@0
            inputs:
              vcpkgArguments: "zlib-ng --debug"
              vcpkgGitCommitId: $(vcpkg.commit)
          - task: run-vcpkg@0
            displayName: "x64-linux(failure)"
            inputs:
              vcpkgArguments: "xnvctrl"
              vcpkgGitCommitId: $(vcpkg.commit)
            continueOnError: true
          - task: run-vcpkg@0
            displayName: "openssl3"
            inputs:
              vcpkgArguments: "openssl3"
              vcpkgGitCommitId: $(vcpkg.commit)
          - task: run-vcpkg@0
            displayName: "tensorflow-lite"
            inputs:
              vcpkgArguments: "tensorflow-lite"
              vcpkgGitCommitId: $(vcpkg.commit)
          - task: run-vcpkg@0
            displayName: "onnxruntime"
            inputs:
              vcpkgArguments: "onnxruntime[xnnpack]"
              vcpkgGitCommitId: $(vcpkg.commit)
          - task: CopyFiles@2
            inputs:
              SourceFolder: "$(Build.BinariesDirectory)/vcpkg/buildtrees/onnxruntime"
              Contents: |
                ?(*.log|*.txt)
                *.cmake
              TargetFolder: "$(Build.ArtifactStagingDirectory)"
              OverWrite: true
            condition: always()
          - task: PublishBuildArtifacts@1
            displayName: "Publish Staged Logs"
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)"
              ArtifactName: "$(Agent.JobName)"
            condition: always()
        timeoutInMinutes: "300"

      - job: "port_android"
        displayName: "Android"
        pool:
          vmImage: ubuntu-22.04
        strategy:
          matrix:
            arm64_ndk25:
              vcpkg.default.triplet: "arm64-android"
              android.ndk.home: "/usr/local/lib/android/sdk/ndk/25.1.8937393"
            x64_ndk25:
              vcpkg.default.triplet: "x64-android"
              android.ndk.home: "/usr/local/lib/android/sdk/ndk/25.1.8937393"
            arm64_ndk24:
              vcpkg.default.triplet: "arm64-android"
              android.ndk.home: "/usr/local/lib/android/sdk/ndk/24.0.8215888"
            arm_neon_ndk24:
              vcpkg.default.triplet: "arm-neon-android"
              android.ndk.home: "/usr/local/lib/android/sdk/ndk/24.0.8215888"
        steps:
          - task: run-vcpkg@0
            displayName: "Detect Compiler"
            inputs:
              vcpkgArguments: "eigen3 --debug"
              vcpkgGitCommitId: $(vcpkg.commit)
          - task: run-vcpkg@0
            displayName: "Custom Triplet"
            inputs:
              vcpkgArguments: "vulkan onnxruntime[xnnpack] tensorflow-lite[gpu]"
              vcpkgGitCommitId: $(vcpkg.commit)
            env:
              VCPKG_OVERLAY_TRIPLETS: $(Build.SourcesDirectory)/triplets
          - task: run-vcpkg@0
            displayName: "Default Triplet"
            inputs:
              vcpkgArguments: "openssl3 zlib-ng libdispatch fft2d farmhash ruy eigen3"
              vcpkgGitCommitId: $(vcpkg.commit)
        timeoutInMinutes: "300"

      - job: "port_osx"
        displayName: "Mac"
        pool:
          vmImage: macOS-12
        strategy:
          matrix:
            arm64_osx:
              vcpkg.default.triplet: "arm64-osx"
            x64_osx:
              vcpkg.default.triplet: "x64-osx"
        steps:
          - powershell: brew install autoconf automake libtool
            displayName: "Install HomeBrew packages"
          - task: UsePythonVersion@0
            displayName: "Setup: Python 3.10"
            inputs:
              versionSpec: "3.10"
              addToPath: true
              architecture: "x64"
          - powershell: pip install typing-extensions pybind11 numpy pyyaml
            displayName: "Install Python packages"
          - task: run-vcpkg@0
            inputs:
              vcpkgArguments: "zlib-ng --debug"
              vcpkgGitCommitId: $(vcpkg.commit)
          - task: run-vcpkg@0
            displayName: "openssl3"
            inputs:
              vcpkgArguments: "openssl3"
              vcpkgGitCommitId: $(vcpkg.commit)
          - task: run-vcpkg@0
            displayName: "metal-cpp"
            inputs:
              vcpkgArguments: "metal-cpp"
              vcpkgGitCommitId: $(vcpkg.commit)
          - task: run-vcpkg@0
            displayName: "tensorflow-lite"
            inputs:
              vcpkgArguments: "tensorflow-lite[gpu]"
              vcpkgGitCommitId: $(vcpkg.commit)
          - task: run-vcpkg@0
            displayName: "onnxruntime"
            inputs:
              vcpkgArguments: "onnxruntime[xnnpack,coreml]"
              vcpkgGitCommitId: $(vcpkg.commit)
        timeoutInMinutes: "300"

      - job: "port_ios"
        displayName: "iOS"
        pool:
          vmImage: macOS-12
        strategy:
          matrix:
            arm64_ios:
              vcpkg.default.triplet: "arm64-ios"
              vcpkg.overlay.triplets: "$(Build.SourcesDirectory)/triplets"
        steps:
          - powershell: brew install autoconf automake libtool
          - task: run-vcpkg@0
            inputs:
              vcpkgArguments: "zlib-ng --debug"
              vcpkgGitCommitId: $(vcpkg.commit)
          - task: run-vcpkg@0
            displayName: "arm64-ios"
            inputs:
              vcpkgArguments: "openssl3 metal-cpp xnnpack"
              vcpkgGitCommitId: $(vcpkg.commit)
          - task: run-vcpkg@0
            displayName: "arm64-ios-simulator"
            inputs:
              vcpkgArguments: "openssl3 xnnpack"
              vcpkgGitCommitId: $(vcpkg.commit)
            env:
              VCPKG_DEFAULT_TRIPLET: arm64-ios-simulator
          - task: run-vcpkg@0
            displayName: "x64-ios-simulator"
            inputs:
              vcpkgArguments: "openssl3 xnnpack"
              vcpkgGitCommitId: $(vcpkg.commit)
            env:
              VCPKG_DEFAULT_TRIPLET: x64-ios-simulator
        timeoutInMinutes: "300"

  # todo: Deploy stage
  #   Status notification + GitHub release
